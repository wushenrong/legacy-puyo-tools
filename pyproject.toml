# SPDX-FileCopyrightText: 2025 Samuel Wu
#
# SPDX-License-Identifier: MIT-0

[build-system]
build-backend = "hatchling.build"
requires = [ "hatchling" ]

[project]
name = "legacy-puyo-tools"
version = "2025.07.24"

description = "A tool to edit text for older Puyo Puyo games."
readme = "README.md"
keywords = [ "puyopuyo" ]
license = "(MIT AND MIT-0)"
license-files = [ "LICENSE" ]
authors = [ { name = "Samuel Wu", email = "twopizza9621536@gmail.com" } ]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Environment :: Console",
    "Intended Audience :: Other Audience",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",

    "Programming Language :: Python :: 3 :: Only",

    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: File Formats",
    "Topic :: Games/Entertainment :: Puzzle Games",
    "Topic :: Utilities",
]
dependencies = [
    "attrs>=25.3",
    "bidict>=0.23.1",
    "click>=8.2.1",
    "cloup>=3.0.7",
    "lxml>=6",
    "numpy>=2.0.2",
    "pillow>=11.3",
]
urls.Changelog = "https://github.com/wushenrong/legacy-puyo-tools/blob/main/CHANGELOG.md"
urls.Homepage = "https://github.com/wushenrong/legacy-puyo-tools"
urls.Issues = "https://github.com/wushenrong/legacy-puyo-tools/issues"
urls.Source = "https://github.com/wushenrong/legacy-puyo-tools.git"

scripts.legacy-puyo-tools = "legacy_puyo_tools.cli:app"

[dependency-groups]
dev = [
    "reuse>=5.0.2",
    "ruff>=0.12.4",
    "tox>=4.28",
    "tox-gh-actions>=3.3",
    "tox-uv>=1.26.2",
    { include-group = "lint" },
    { include-group = "pylint" },
    { include-group = "test" },
    { include-group = "type" },
]
test = [ "pytest>=8.4.1", "pytest-cov>=6.2.1", "typing-extensions>=4.14.1" ]
type = [
    "pyright[nodejs]>=1.1.403",
    "types-lxml>=2025.3.30",
    { include-group = "test" },
]

lint = [ "pre-commit-uv>=4.1.4" ]
pkg-meta = [ "check-wheel-contents>=0.6.1", "twine>=6.1", "uv>=0.8" ]
pylint = [ "pylint>=3.3.7" ]

[tool.ruff]
# Required for some rules
preview = true

output-format = "concise"

lint.select = [
    "ANN",    # type annotations
    "ARG",    # falke8 unused arguments
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "COM818", # flake8-commas (let the formatter handle commas)
    "D",      # pydocstyle
    "DOC",    # pydoclint
    "E",      # Error
    "ERA",    # eradicate commented out code
    "F",      # pyflakes
    "FIX",    # flake8 fixme
    "FURB",   # refurb
    "I",      # isort
    "ISC",    # flake8-implicit-str-concat
    "N",      # pep8-naming
    "PERF",   # Perflint: performance
    "PGH",    # pygrep-hooks
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "PTH",    # flake8-use-pathlib
    "Q",      # flake8-quotes
    "RUF",    # Ruff specific rules
    "S",      # bandit security checks
    "SIM",    # flake8-simplify
    "UP",     # pyupgrade
    "W",      # Warning
    "YTT",    # flake8-2020
]
lint.per-file-ignores."**/tests/*" = [ "S101" ] # We need asserts for pytest
lint.typing-modules = [ "types-lxml" ]

lint.pydocstyle.convention = "google"

[tool.pylint]
# All done by ruff with DOC and FIX
disable = [ "missing-class-docstring", "missing-function-docstring", "fixme" ]
extension-pkg-allow-list = [ "lxml" ]
max-line-length = 88
output-format = "colorized"

[tool.pyproject-fmt]
column_width = 80
indent = 4

[tool.pytest.ini_options]
addopts = [ "--cov", "--cov-branch", "--import-mode=importlib" ]
minversion = "8.4"

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_also = [
    '@(abc\.)?abstractmethod',
    'class .*\bProtocol\):',
    'def __repr__',
    'if 0:',
    'if TYPE_CHECKING:',
    'if __name__ == .__main__.:',
    'if self.debug:',
    'if settings.DEBUG',
    'raise AssertionError',
    'raise NotImplementedError',
]

[tool.pyright]
include = [ "src", "tests" ]
typeCheckingMode = "strict"
